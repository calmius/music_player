

* Notes
#+begin_src org
  ,* Mental model
   –í –∏—Ç–æ–≥–µ, –¥–æ–ª–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—Å—è 2 api, –∏–ª–∏ –ª—É—á—à–µ —Å–∫–∞–∑–∞—Ç—å, –æ–¥–∏–Ω api –∏ –æ–¥–∏–Ω –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å.
   –í –ø–µ—Ä–≤—ã–π api –≤—Ö–æ–¥–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ: server, mux(router) and specific functions for each route, database and migration, swagger documentation(e.i. yaml file), models(used for save data from databre into)
   –ò –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π package(service.go), –∫–æ—Ç–æ—Ä—ã–π fetch –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â–∏–π –ø–µ—Å–Ω–∏, –∏ –¥–æ–±–æ–∞–ª—è–µ—Ç –∫ –Ω–µ–π –¥–æ–ø. –ø–æ–ª—è, —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö postgresql
   –°–∞–º –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –æ–ø–∏—Å–∞–Ω –≤ –ø—Ä–∏–ª–∞–≥–∞–µ–º–æ–º yaml —Ñ–∞–π–ª–µ
  ,* Road map
   - Build REST API
   - Connect to PostgreSQL
  ,* What a have to understand:
   - Datadase migration;
   - Pagination;
   - Swagger;
   - PostgreSQL basics (/sqlx, pq, goose/);
   - confgit data in .env file (/direnv/ package);
   - /debug-/ and /info-/ logs
  ,* Links
    + [[https://www.youtube.com/watch?v=AeIksLEHp8E][Setting up Go app with PorstgreSql]]
    + [[https://www.commandprompt.com/education/how-to-install-and-setup-postgresql-on-debian-12/][Quick guide to postgreSQL]]
    + [[https://dev.to/karanpratapsingh/connecting-to-postgresql-using-gorm-24fj][Gorm setup]]
    + [[https://medium.com/@akgol97_/building-a-restful-api-with-go-and-postgres-guide-64ccd3da6bc][REST API example]] + env
    + [[https://www.honeybadger.io/blog/a-step-by-step-guide-to-creating-production-ready-apis-in-go-with-gin-and-gorm/][Good rest api guide]]

  ,* Concepts
  ,** Models and Migration
  + Models and Migrations, are used to interact with the database from your code‚Äîyou can create, delete, and update tables and columns.
#+end_src

* –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–Ω–ª–∞–π–Ω /–±–∏–±–ª–∏–æ—Ç–µ–∫–∏/ –ø–µ—Å–µ–Ω üé∂
–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ
1. –í—ã—Å—Ç–∞–≤–∏—Ç—å rest –º–µ—Ç–æ–¥—ã
   + –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö =–±–∏–±–ª–∏–æ—Ç–µ–∫–∏(/PostgreSQL/ database=) —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –≤—Å–µ–º –ø–æ–ª—è–º –∏ /–ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π / 
   + –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Å–Ω–∏ —Å /–ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π/ –ø–æ –∫—É–ø–ª–µ—Ç–∞–º(GET LYRICS)
   + –£–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Å–Ω–∏ (DELETE)
   + –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Å–Ω–∏ (PUT)
   + –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–µ—Å–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (PUT)
#+begin_src json
{
 "group": "Muse",
 "song": "Supermassive Black Hole"
}
#+end_src

2. –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –ê–ü–ò, –æ–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —Å–≤–∞–≥–≥–µ—Ä–æ–º
#+begin_src yaml
openapi: 3.0.3
info:
  title: Music info
  version: 0.0.1
paths:
  /info:
    get:
      parameters:
        - name: group
          in: query
          required: true
          schema:
            type: string
        - name: song
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SongDetail'
        '400':
          description: Bad request
        '500':
          description: Internal server error
components:
  schemas:
    SongDetail:
      required:
        - releaseDate
        - text
        - link
      type: object
      properties:
        releaseDate:
          type: string
          example: 16.07.2006
        text:
          type: string
          example: Ooh baby, don't you know I suffer?\nOoh baby, can you hear me moan?\nYou caught me under false pretenses\nHow long before you let me go?\n\nOoh\nYou set my soul alight\nOoh\nYou set my soul alight
        link:
          type: string
          example: https://www.youtube.com/watch?v=Xsp3_a-PMTw
#+end_src
3. –û–±–æ–≥–∞—â–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª–æ–∂–∏—Ç—å –≤ –ë–î Postgres (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞ –ø—É—Ç–µ–º –º–∏–≥—Ä–∞—Ü–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–∏—Å–∞) 


4. –ü–æ–∫—Ä—ã—Ç—å –∫–æ–¥ debug- –∏ info-–ª–æ–≥–∞–º–∏
5. –í—ã–Ω–µ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ .env-—Ñ–∞–π–ª

6. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–∞–≥–≥–µ—Ä –Ω–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ê–ü–ò

–°–ø–∏—Å–æ–∫ —Ç–µ–º –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏:

Golang
1. –û–û–ü
2. –û–û–ü –≤ Golang
3. –ü–µ—Ä–µ–¥–∞—á–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
4. –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
5. –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å
6. –ö–∞–Ω–∞–ª—ã
7. –ö–æ–Ω—Ç–µ–∫—Å—Ç—ã
Postgres
1. –ü–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á
2. –í–Ω–µ—à–Ω–∏–π –∫–ª—é—á
3. –°–≤—è–∑–∏
4. Join
–ó–∞–¥–∞—á–∏
1. defer. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
2. defer. –ü–æ—Ä—è–¥–æ–∫ –≤—ã–∑–æ–≤–∞
3. goroutine, waitgroup
4. –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∫–∞
   
